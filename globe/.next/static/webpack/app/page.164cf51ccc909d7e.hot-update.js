"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./src/app/ajay.jsx":
/*!**************************!*\
  !*** ./src/app/ajay.jsx ***!
  \**************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/jsx-dev-runtime.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var three__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! three */ \"(app-pages-browser)/./node_modules/three/build/three.module.js\");\n/* harmony import */ var three_examples_jsm_controls_OrbitControls_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! three/examples/jsm/controls/OrbitControls.js */ \"(app-pages-browser)/./node_modules/three/examples/jsm/controls/OrbitControls.js\");\n/* harmony import */ var three_globe__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! three-globe */ \"(app-pages-browser)/./node_modules/three-globe/dist/three-globe.mjs\");\n/* harmony import */ var _files_globe_data_min_json__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./files/globe-data-min.json */ \"(app-pages-browser)/./src/app/files/globe-data-min.json\");\n// import React, { useEffect, useRef } from \"react\";\n// import * as THREE from \"three\";\n// import { OrbitControls } from \"three/examples/jsm/controls/OrbitControls.js\";\n// import ThreeGlobe from \"three-globe\";\n// import countries from \"./files/globe-data-min.json\";\n// import travelHistory from \"./files/my-flights.json\";\n// const Globe = React.memo(() => {\n//   const globeRef = useRef(null);\n//   const animationRef = useRef(null);\n//   const raycaster = useRef(new THREE.Raycaster());\n//   const mouseX = useRef(0);\n//   const mouseY = useRef(0);\n//   const windowHalfX = useRef(window.innerWidth / 5);\n//   const windowHalfY = useRef(window.innerHeight / 5);\n//   const renderer = useRef(new THREE.WebGLRenderer({ antialias: true }));\n//   const camera = useRef(new THREE.PerspectiveCamera());\n//   const scene = useRef(new THREE.Scene());\n//   const controls = useRef(\n//     new OrbitControls(camera.current, renderer.current.domElement)\n//   );\n//   // Sample data for markers\n//   const locations = [\n//     { lat: 28.6139, lng: 77.209, name: \"Delhi\", color: \"#ff0000\" },\n//     { lat: 40.7128, lng: -74.006, name: \"New York\", color: \"#00ff00\" },\n//     { lat: 51.5074, lng: -0.1278, name: \"London\", color: \"#0000ff\" },\n//     { lat: 35.6895, lng: 139.6917, name: \"Tokyo\", color: \"#ffff00\" },\n//     { lat: -33.8688, lng: 151.2093, name: \"Sydney\", color: \"#ff00ff\" },\n//     { lat: 48.8566, lng: 2.3522, name: \"Paris\", color: \"#00ffff\" },\n//     { lat: 55.7558, lng: 37.6173, name: \"Moscow\", color: \"#ff7700\" },\n//   ];\n//   useEffect(() => {\n//     const onWindowResize = () => {\n//       const container = globeRef.current;\n//       if (container) {\n//         const width = container.offsetWidth;\n//         const height = container.offsetHeight;\n//         camera.current.aspect = width / height;\n//         camera.current.updateProjectionMatrix();\n//         renderer.current.setSize(width, height);\n//         windowHalfX.current = width / 2;\n//         windowHalfY.current = height / 2;\n//       }\n//     };\n//     const onMouseMove = (event) => {\n//       mouseX.current = event.clientX - windowHalfX.current;\n//       mouseY.current = event.clientY - windowHalfY.current;\n//     };\n//     const animate = () => {\n//       scene.current.rotation.y -= 0.0005;\n//       camera.current.position.x +=\n//         Math.abs(mouseX.current) <= windowHalfX.current / 2\n//           ? (mouseX.current / 2 - camera.current.position.x) * 0.005\n//           : 0;\n//       camera.current.position.y +=\n//         (-mouseY.current / 2 - camera.current.position.y) * 0.005;\n//       camera.current.lookAt(scene.current.position);\n//       controls.current.update();\n//       renderer.current.render(scene.current, camera.current);\n//       animationRef.current = requestAnimationFrame(animate);\n//     };\n//     const init = () => {\n//       const container = globeRef.current;\n//       if (!container) return;\n//       renderer.current.setPixelRatio(window.devicePixelRatio);\n//       renderer.current.setSize(container.offsetWidth, container.offsetHeight);\n//       container.appendChild(renderer.current.domElement);\n//       scene.current.add(new THREE.AmbientLight(0xffffff, 0.5));\n//       const dirLight = new THREE.DirectionalLight(0xffffff, 1);\n//       dirLight.position.set(5, 3, 4);\n//       scene.current.add(dirLight);\n//       scene.current.background = new THREE.Color(0x030712);\n//       camera.current.aspect = container.offsetWidth / container.offsetHeight;\n//       camera.current.position.z = 400;\n//       camera.current.position.x = 0;\n//       camera.current.position.y = 0;\n//       camera.current.updateProjectionMatrix();\n//       controls.current.enableDamping = true;\n//       controls.current.dynamicDampingFactor = 0.01;\n//       controls.current.enablePan = false;\n//       controls.current.enableZoom = false; // Disable zoom functionality\n//       controls.current.rotateSpeed = 0.8;\n//       controls.current.autoRotate = false;\n//       controls.current.minPolarAngle = Math.PI / 3.5;\n//       controls.current.maxPolarAngle = Math.PI - Math.PI / 3;\n//       window.addEventListener(\"resize\", onWindowResize);\n//       document.addEventListener(\"mousemove\", onMouseMove);\n//     };\n//     const initGlobe = () => {\n//       const Globe = new ThreeGlobe({\n//         waitForGlobeReady: true,\n//         animateIn: true,\n//       })\n//         .hexPolygonsData(countries.features)\n//         .hexPolygonResolution(3)\n//         .hexPolygonMargin(0.7)\n//         .showAtmosphere(true)\n//         .atmosphereColor(\"#3a228a\")\n//         .atmosphereAltitude(0.25)\n//         .hexPolygonColor((e) =>\n//           [\"KGZ\", \"KOR\", \"THA\", \"RUS\", \"UZB\", \"IDN\", \"KAZ\", \"MYS\"].includes(\n//             e.properties.ISO_A3\n//           )\n//             ? \"rgba(255,255,255, 1)\"\n//             : \"rgba(255,255,255, 0.7)\"\n//         )\n//         .pointsData(locations)\n//         .pointAltitude(0.1) // Marker altitude\n//         .pointColor((e) => e.color)\n//         .pointRadius(2) // Marker size\n//         .pointResolution(12); // Marker resolution\n//       setTimeout(() => {\n//         Globe.arcsData(travelHistory.flights)\n//           .arcColor((e) => (e.status ? \"#00ff00\" : \"#ff0000\"))\n//           .arcAltitude((e) => e.arcAlt)\n//           .arcStroke((e) => (e.status ? 0.5 : 0.3))\n//           .arcDashLength(0.9)\n//           .arcDashGap(4)\n//           .arcDashAnimateTime(1000)\n//           .arcsTransitionDuration(1000)\n//           .arcDashInitialGap((e) => e.order * 1);\n//       }, 1000);\n//       Globe.rotateY(-Math.PI * (5 / 9));\n//       Globe.rotateZ(-Math.PI / 6);\n//       const globeMaterial = Globe.globeMaterial();\n//       globeMaterial.color = new THREE.Color(0x3a228a);\n//       globeMaterial.emissive = new THREE.Color(0x220038);\n//       globeMaterial.emissiveIntensity = 0.1;\n//       globeMaterial.shininess = 0.7;\n//       globeMaterial.opacity = 0.2;\n//       globeMaterial.transparent = true;\n//       scene.current.add(Globe);\n//     };\n//     init();\n//     initGlobe();\n//     animate();\n//     return () => {\n//       cancelAnimationFrame(animationRef.current);\n//       window.removeEventListener(\"resize\", onWindowResize);\n//       document.removeEventListener(\"mousemove\", onMouseMove);\n//     };\n//   }, []);\n//   return (\n//     <div\n//       ref={globeRef}\n//       style={{\n//         width: \"33%\",\n//         height: \"65%\",\n//         position: \"absolute\",\n//         left: \"17%\",\n//       }}\n//     />\n//   );\n// });\n// // Add displayName for debugging purposes\n// Globe.displayName = \"Globe\";\n// export default Globe;\n//update one \n\nvar _s = $RefreshSig$();\n\n\n\n\n\nconst Globe = /*#__PURE__*/ _s(react__WEBPACK_IMPORTED_MODULE_1___default().memo(_c = _s(()=>{\n    _s();\n    const globeRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    const animationRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    const raycaster = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(new three__WEBPACK_IMPORTED_MODULE_3__.Raycaster());\n    const mouse = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(new three__WEBPACK_IMPORTED_MODULE_3__.Vector2());\n    const renderer = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(new three__WEBPACK_IMPORTED_MODULE_3__.WebGLRenderer({\n        antialias: true\n    }));\n    const camera = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(new three__WEBPACK_IMPORTED_MODULE_3__.PerspectiveCamera());\n    const scene = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(new three__WEBPACK_IMPORTED_MODULE_3__.Scene());\n    const controls = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(new three_examples_jsm_controls_OrbitControls_js__WEBPACK_IMPORTED_MODULE_4__.OrbitControls(camera.current, renderer.current.domElement));\n    // Sample data for markers\n    const locations = [\n        {\n            lat: 28.6139,\n            lng: 77.209,\n            name: \"Delhi\",\n            color: \"#ff0000\"\n        },\n        {\n            lat: 40.7128,\n            lng: -74.006,\n            name: \"New York\",\n            color: \"#00ff00\"\n        },\n        {\n            lat: 51.5074,\n            lng: -0.1278,\n            name: \"London\",\n            color: \"#0000ff\"\n        },\n        {\n            lat: 35.6895,\n            lng: 139.6917,\n            name: \"Tokyo\",\n            color: \"#ffff00\"\n        },\n        {\n            lat: -33.8688,\n            lng: 151.2093,\n            name: \"Sydney\",\n            color: \"#ff00ff\"\n        },\n        {\n            lat: 48.8566,\n            lng: 2.3522,\n            name: \"Paris\",\n            color: \"#00ffff\"\n        },\n        {\n            lat: 55.7558,\n            lng: 37.6173,\n            name: \"Moscow\",\n            color: \"#ff7700\"\n        }\n    ];\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)({\n        \"Globe.useEffect\": ()=>{\n            const onWindowResize = {\n                \"Globe.useEffect.onWindowResize\": ()=>{\n                    const container = globeRef.current;\n                    if (container) {\n                        const width = container.offsetWidth;\n                        const height = container.offsetHeight;\n                        camera.current.aspect = width / height;\n                        camera.current.updateProjectionMatrix();\n                        renderer.current.setSize(width, height);\n                    }\n                }\n            }[\"Globe.useEffect.onWindowResize\"];\n            const onMouseClick = {\n                \"Globe.useEffect.onMouseClick\": (event)=>{\n                    const container = globeRef.current;\n                    if (container) {\n                        const rect = container.getBoundingClientRect();\n                        mouse.current.x = (event.clientX - rect.left) / rect.width * 2 - 1;\n                        mouse.current.y = -((event.clientY - rect.top) / rect.height) * 2 + 1;\n                        // Raycaster logic to detect click on markers\n                        raycaster.current.setFromCamera(mouse.current, camera.current);\n                        const intersects = raycaster.current.intersectObjects(scene.current.children, true);\n                        // Check if a marker with userData.name is clicked\n                        if (intersects.length > 0) {\n                            const clickedObject = intersects[0].object;\n                            if (clickedObject.userData && clickedObject.userData.name) {\n                                const locationName = clickedObject.userData.name;\n                                alert(\"You clicked on: \".concat(locationName));\n                            }\n                        }\n                    }\n                }\n            }[\"Globe.useEffect.onMouseClick\"];\n            const onMouseMove = {\n                \"Globe.useEffect.onMouseMove\": (event)=>{\n                    const container = globeRef.current;\n                    if (container) {\n                        const rect = container.getBoundingClientRect();\n                        mouse.current.x = (event.clientX - rect.left) / rect.width * 2 - 1;\n                        mouse.current.y = -((event.clientY - rect.top) / rect.height) * 2 + 1;\n                        // Raycaster logic to detect hovering over markers\n                        raycaster.current.setFromCamera(mouse.current, camera.current);\n                        const intersects = raycaster.current.intersectObjects(scene.current.children);\n                        if (intersects.length > 0) {\n                            container.style.cursor = \"pointer\"; // Change cursor to pointer\n                        } else {\n                            container.style.cursor = \"default\"; // Reset cursor to default\n                        }\n                    }\n                }\n            }[\"Globe.useEffect.onMouseMove\"];\n            const animate = {\n                \"Globe.useEffect.animate\": ()=>{\n                    controls.current.update();\n                    renderer.current.render(scene.current, camera.current);\n                    animationRef.current = requestAnimationFrame(animate);\n                }\n            }[\"Globe.useEffect.animate\"];\n            const init = {\n                \"Globe.useEffect.init\": ()=>{\n                    const container = globeRef.current;\n                    if (!container) return;\n                    renderer.current.setPixelRatio(window.devicePixelRatio);\n                    renderer.current.setSize(container.offsetWidth, container.offsetHeight);\n                    container.appendChild(renderer.current.domElement);\n                    scene.current.add(new three__WEBPACK_IMPORTED_MODULE_3__.AmbientLight(0xffffff, 0.5));\n                    const dirLight = new three__WEBPACK_IMPORTED_MODULE_3__.DirectionalLight(0xffffff, 1);\n                    dirLight.position.set(5, 3, 4);\n                    scene.current.add(dirLight);\n                    scene.current.background = new three__WEBPACK_IMPORTED_MODULE_3__.Color(0x030712);\n                    camera.current.aspect = container.offsetWidth / container.offsetHeight;\n                    camera.current.position.z = 400;\n                    camera.current.position.x = 0;\n                    camera.current.position.y = 0;\n                    camera.current.updateProjectionMatrix();\n                    // Enable rotation and zoom\n                    controls.current.enableDamping = true;\n                    controls.current.dynamicDampingFactor = 0.01;\n                    controls.current.enablePan = false; // Pan disabled for smoother experience\n                    controls.current.enableZoom = true; // Enable zoom\n                    controls.current.rotateSpeed = 1; // Adjust rotation speed\n                    controls.current.autoRotate = true; // Enable auto rotation\n                    controls.current.autoRotateSpeed = 0.5; // Speed of auto rotation\n                    controls.current.minDistance = 100; // Minimum zoom distance\n                    controls.current.maxDistance = 1000; // Maximum zoom distance\n                    controls.current.minPolarAngle = Math.PI / 6; // Restrict vertical rotation\n                    controls.current.maxPolarAngle = Math.PI - Math.PI / 6;\n                    window.addEventListener(\"resize\", onWindowResize);\n                    document.addEventListener(\"mousemove\", onMouseMove);\n                    document.addEventListener(\"click\", onMouseClick); // Add click event listener\n                }\n            }[\"Globe.useEffect.init\"];\n            const initGlobe = {\n                \"Globe.useEffect.initGlobe\": ()=>{\n                    const Globe = new three_globe__WEBPACK_IMPORTED_MODULE_5__[\"default\"]({\n                        waitForGlobeReady: true,\n                        animateIn: true\n                    }).hexPolygonsData(_files_globe_data_min_json__WEBPACK_IMPORTED_MODULE_2__.features).hexPolygonResolution(3).hexPolygonMargin(0.7).showAtmosphere(true).atmosphereColor(\"#3a228a\").atmosphereAltitude(0.25).hexPolygonColor({\n                        \"Globe.useEffect.initGlobe.Globe\": (e)=>[\n                                \"KGZ\",\n                                \"KOR\",\n                                \"THA\",\n                                \"RUS\",\n                                \"UZB\",\n                                \"IDN\",\n                                \"KAZ\",\n                                \"MYS\"\n                            ].includes(e.properties.ISO_A3) ? \"rgba(255,255,255, 1)\" : \"rgba(255,255,255, 0.7)\"\n                    }[\"Globe.useEffect.initGlobe.Globe\"]);\n                    locations.forEach({\n                        \"Globe.useEffect.initGlobe\": (location)=>{\n                            const markerGeometry = new three__WEBPACK_IMPORTED_MODULE_3__.SphereGeometry(2, 16, 16);\n                            const markerMaterial = new three__WEBPACK_IMPORTED_MODULE_3__.MeshBasicMaterial({\n                                color: location.color\n                            });\n                            const marker = new three__WEBPACK_IMPORTED_MODULE_3__.Mesh(markerGeometry, markerMaterial);\n                            const { x, y, z } = Globe.getCoords(location.lat, location.lng);\n                            marker.position.set(x, y, z);\n                            marker.userData = {\n                                name: location.name\n                            }; // Add userData to store location name\n                            scene.current.add(marker);\n                        }\n                    }[\"Globe.useEffect.initGlobe\"]);\n                    setTimeout({\n                        \"Globe.useEffect.initGlobe\": ()=>{\n                            Globe.arcsData(travelHistory.flights).arcColor({\n                                \"Globe.useEffect.initGlobe\": (e)=>e.status ? \"#00ff00\" : \"#ff0000\"\n                            }[\"Globe.useEffect.initGlobe\"]).arcAltitude({\n                                \"Globe.useEffect.initGlobe\": (e)=>e.arcAlt\n                            }[\"Globe.useEffect.initGlobe\"]).arcStroke({\n                                \"Globe.useEffect.initGlobe\": (e)=>e.status ? 0.5 : 0.3\n                            }[\"Globe.useEffect.initGlobe\"]).arcDashLength(0.9).arcDashGap(4).arcDashAnimateTime(1000).arcsTransitionDuration(1000).arcDashInitialGap({\n                                \"Globe.useEffect.initGlobe\": (e)=>e.order * 1\n                            }[\"Globe.useEffect.initGlobe\"]);\n                        }\n                    }[\"Globe.useEffect.initGlobe\"], 1000);\n                    Globe.rotateY(-Math.PI * (5 / 9));\n                    Globe.rotateZ(-Math.PI / 6);\n                    const globeMaterial = Globe.globeMaterial();\n                    globeMaterial.color = new three__WEBPACK_IMPORTED_MODULE_3__.Color(0x3a228a);\n                    globeMaterial.emissive = new three__WEBPACK_IMPORTED_MODULE_3__.Color(0x220038);\n                    globeMaterial.emissiveIntensity = 0.1;\n                    globeMaterial.shininess = 0.7;\n                    globeMaterial.opacity = 0.2;\n                    globeMaterial.transparent = true;\n                    scene.current.add(Globe);\n                }\n            }[\"Globe.useEffect.initGlobe\"];\n            init();\n            initGlobe();\n            animate();\n            return ({\n                \"Globe.useEffect\": ()=>{\n                    cancelAnimationFrame(animationRef.current);\n                    window.removeEventListener(\"resize\", onWindowResize);\n                    document.removeEventListener(\"mousemove\", onMouseMove);\n                    document.removeEventListener(\"click\", onMouseClick); // Unsubscribe click listener\n                }\n            })[\"Globe.useEffect\"];\n        }\n    }[\"Globe.useEffect\"], []);\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n        ref: globeRef,\n        style: {\n            width: \"33%\",\n            height: \"65%\",\n            position: \"absolute\",\n            left: \"17%\"\n        }\n    }, void 0, false, {\n        fileName: \"/home/ajay-singh/Desktop/globe-ajay/Global-House-Activity/globe/src/app/ajay.jsx\",\n        lineNumber: 381,\n        columnNumber: 5\n    }, undefined);\n}, \"NK4E9sSo4L+mF92NqL5adB5DJWA=\")), \"NK4E9sSo4L+mF92NqL5adB5DJWA=\");\n_c1 = Globe;\n// Add displayName for debugging purposes\nGlobe.displayName = \"Globe\";\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Globe); // import React, { useEffect, useRef } from \"react\";\n // import * as THREE from \"three\";\n // import { OrbitControls } from \"three/examples/jsm/controls/OrbitControls.js\";\n // import ThreeGlobe from \"three-globe\";\n // import countries from \"./files/globe-data-min.json\";\n // const Globe = React.memo(() => {\n //   const globeRef = useRef(null);\n //   const animationRef = useRef(null);\n //   const raycaster = useRef(new THREE.Raycaster());\n //   const mouse = useRef(new THREE.Vector2());\n //   const renderer = useRef(new THREE.WebGLRenderer({ antialias: true }));\n //   const camera = useRef(new THREE.PerspectiveCamera());\n //   const scene = useRef(new THREE.Scene());\n //   const controls = useRef(\n //     new OrbitControls(camera.current, renderer.current.domElement)\n //   );\n //   // Sample data for markers\n //   const locations = [\n //     { lat: 28.6139, lng: 77.209, name: \"Delhi\", color: \"#ff0000\" },\n //     { lat: 40.7128, lng: -74.006, name: \"New York\", color: \"#00ff00\" },\n //     { lat: 51.5074, lng: -0.1278, name: \"London\", color: \"#0000ff\" },\n //     { lat: 35.6895, lng: 139.6917, name: \"Tokyo\", color: \"#ffff00\" },\n //     { lat: -33.8688, lng: 151.2093, name: \"Sydney\", color: \"#ff00ff\" },\n //     { lat: 48.8566, lng: 2.3522, name: \"Paris\", color: \"#00ffff\" },\n //     { lat: 55.7558, lng: 37.6173, name: \"Moscow\", color: \"#ff7700\" },\n //   ];\n //   useEffect(() => {\n //     const onWindowResize = () => {\n //       const container = globeRef.current;\n //       if (container) {\n //         const width = container.offsetWidth;\n //         const height = container.offsetHeight;\n //         camera.current.aspect = width / height;\n //         camera.current.updateProjectionMatrix();\n //         renderer.current.setSize(width, height);\n //       }\n //     };\n //     const animate = () => {\n //       controls.current.update();\n //       renderer.current.render(scene.current, camera.current);\n //       animationRef.current = requestAnimationFrame(animate);\n //     };\n //     const init = () => {\n //       const container = globeRef.current;\n //       if (!container) return;\n //       renderer.current.setPixelRatio(window.devicePixelRatio);\n //       renderer.current.setSize(container.offsetWidth, container.offsetHeight);\n //       container.appendChild(renderer.current.domElement);\n //       scene.current.add(new THREE.AmbientLight(0xffffff, 0.5));\n //       const dirLight = new THREE.DirectionalLight(0xffffff, 1);\n //       dirLight.position.set(5, 3, 4);\n //       scene.current.add(dirLight);\n //       scene.current.background = new THREE.Color(0x030712);\n //       camera.current.aspect = container.offsetWidth / container.offsetHeight;\n //       camera.current.position.z = 400;\n //       camera.current.position.x = 0;\n //       camera.current.position.y = 0;\n //       camera.current.updateProjectionMatrix();\n //       // Enable rotation and zoom\n //       controls.current.enableDamping = true;\n //       controls.current.dynamicDampingFactor = 0.01;\n //       controls.current.enablePan = false;\n //       controls.current.enableZoom = true;\n //       controls.current.rotateSpeed = 1;\n //       controls.current.autoRotate = true;\n //       controls.current.autoRotateSpeed = 0.5;\n //       controls.current.minDistance = 100;\n //       controls.current.maxDistance = 1000;\n //       controls.current.minPolarAngle = Math.PI / 6;\n //       controls.current.maxPolarAngle = Math.PI - Math.PI / 6;\n //       window.addEventListener(\"resize\", onWindowResize);\n //     };\n //     const initGlobe = () => {\n //       const Globe = new ThreeGlobe({\n //         waitForGlobeReady: true,\n //         animateIn: true,\n //       })\n //         .hexPolygonsData(countries.features)\n //         .hexPolygonResolution(3)\n //         .hexPolygonMargin(0.7)\n //         .showAtmosphere(true)\n //         .atmosphereColor(\"#3a228a\")\n //         .atmosphereAltitude(0.25)\n //         .hexPolygonColor((e) =>\n //           [\"KGZ\", \"KOR\", \"THA\", \"RUS\", \"UZB\", \"IDN\", \"KAZ\", \"MYS\"].includes(\n //             e.properties.ISO_A3\n //           )\n //             ? \"rgba(255,255,255, 1)\"\n //             : \"rgba(255,255,255, 0.7)\"\n //         );\n //       Globe.rotateY(-Math.PI * (5 / 9));\n //       Globe.rotateZ(-Math.PI / 6);\n //       const globeMaterial = Globe.globeMaterial();\n //       globeMaterial.color = new THREE.Color(0x3a228a); // Globe base color\n //       globeMaterial.emissive = new THREE.Color(0x220038); // Glow effect\n //       globeMaterial.emissiveIntensity = 0.1;\n //       globeMaterial.shininess = 0.7;\n //       globeMaterial.opacity = 0.2;\n //       globeMaterial.transparent = true;\n //       locations.forEach((location) => {\n //         const markerGeometry = new THREE.SphereGeometry(2, 16, 16);\n //         const markerMaterial = new THREE.MeshBasicMaterial({\n //           color: location.color,\n //         });\n //         const marker = new THREE.Mesh(markerGeometry, markerMaterial);\n //         const { x, y, z } = Globe.getCoords(location.lat, location.lng);\n //         marker.position.set(x, y, z);\n //         marker.userData = { name: location.name };\n //         scene.current.add(marker);\n //       });\n //       scene.current.add(Globe);\n //     };\n //     init();\n //     initGlobe();\n //     animate();\n //     return () => {\n //       cancelAnimationFrame(animationRef.current);\n //       window.removeEventListener(\"resize\", onWindowResize);\n //     };\n //   }, []);\n //   return (\n //     <div\n //       ref={globeRef}\n //       style={{\n //         width: \"33%\",\n //         height: \"65%\",\n //         position: \"absolute\",\n //         left: \"17%\",\n //       }}\n //     />\n //   );\n // });\n // // Add displayName for debugging purposes\n // Globe.displayName = \"Globe\";\n // export default Globe;\nvar _c, _c1;\n$RefreshReg$(_c, \"Globe$React.memo\");\n$RefreshReg$(_c1, \"Globe\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/app/ajay.jsx\n"));

/***/ })

});